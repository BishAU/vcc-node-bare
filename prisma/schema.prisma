// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and profile management
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  phone         String?
  
  // Company Information
  companyName   String?
  abn          String?
  
  // Address Information
  address1     String
  address2     String?
  city         String
  state        String
  postcode     String
  country      String
  
  // Optional shipping address
  shippingAddress1 String?
  shippingAddress2 String?
  shippingCity     String?
  shippingState    String?
  shippingPostcode String?
  shippingCountry  String?
  
  password      String    // Hashed password
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  orders        Order[]
  subscriptions Subscription[]
  
  @@map("users")
}

enum UserRole {
  USER
  ADMIN
}

// Product model for both one-time purchases and subscription plans
model Product {
  id          String   @id @default(cuid())
  sku         String   @unique
  name        String
  description String?
  unitPrice   Float
  type        ProductType
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Tax settings
  taxRate     Float    @default(0.1) // Default 10% GST
  taxInclusive Boolean @default(true)
  
  // Stripe specific fields
  stripeProductId    String?  @unique
  stripePriceId      String?  @unique
  
  // Relations
  orderItems   OrderItem[]
  subscriptionPlans SubscriptionPlan[]
  
  // GL Code mapping
  glCodeId     String
  glCode       GLCode    @relation(fields: [glCodeId], references: [id])
  
  @@map("products")
}

enum ProductType {
  ONE_TIME
  SUBSCRIPTION
}

// Order model for one-time purchases
model Order {
  id          String    @id @default(cuid())
  userId      String
  status      OrderStatus
  
  // Transaction Details
  subtotal    Float
  taxAmount   Float
  total       Float
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus
  notes       String?
  
  // Stripe specific fields
  stripePaymentIntentId String?  @unique
  stripeMetadata Json?
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  user        User       @relation(fields: [userId], references: [id])
  items       OrderItem[]
  invoice     Invoice?
  transaction Transaction?
  
  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  sku       String
  quantity  Int
  unitPrice Float
  taxAmount Float
  total     Float
  
  // Relations
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  
  @@map("order_items")
}

// Transaction model to store detailed transaction information
model Transaction {
  id            String    @id @default(cuid())
  orderId       String    @unique
  
  // Customer Information at time of transaction
  customerName  String
  customerEmail String
  customerPhone String
  companyName   String?
  abn          String?
  
  // Billing Address at time of transaction
  billingAddress1  String
  billingAddress2  String?
  billingCity      String
  billingState     String
  billingPostcode  String
  billingCountry   String
  
  // Shipping Address at time of transaction
  shippingAddress1 String?
  shippingAddress2 String?
  shippingCity     String?
  shippingState    String?
  shippingPostcode String?
  shippingCountry  String?
  
  // Payment Information
  paymentMethod    PaymentMethod
  paymentStatus    PaymentStatus
  stripeMetadata   Json?
  
  // Subscription Information (if applicable)
  subscriptionType SubscriptionType?
  
  // Timestamps and Notes
  timestamp     DateTime  @default(now())
  notes         String?
  
  // Relations
  order         Order     @relation(fields: [orderId], references: [id])
  
  @@map("transactions")
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  BANK_TRANSFER
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum SubscriptionType {
  MONTHLY
  ANNUAL
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

// Subscription model for recurring payments
model Subscription {
  id              String    @id @default(cuid())
  userId          String
  planId          String
  status          SubscriptionStatus
  subscriptionType SubscriptionType
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Stripe specific fields
  stripeSubscriptionId String?  @unique
  stripeMetadata      Json?
  
  // Relations
  user            User     @relation(fields: [userId], references: [id])
  plan            SubscriptionPlan @relation(fields: [planId], references: [id])
  invoices        Invoice[]
  
  @@map("subscriptions")
}

model SubscriptionPlan {
  id          String   @id @default(cuid())
  productId   String
  name        String
  interval    SubscriptionType
  unitPrice   Float
  taxAmount   Float
  
  // Relations
  product     Product  @relation(fields: [productId], references: [id])
  subscriptions Subscription[]
  
  @@map("subscription_plans")
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELLED
  UNPAID
}

// Invoice model for both orders and subscriptions
model Invoice {
  id          String    @id @default(cuid())
  number      String    @unique
  subtotal    Float
  taxAmount   Float
  total       Float
  status      InvoiceStatus
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Optional relations (an invoice can be for either an order or subscription)
  orderId     String?   @unique
  order       Order?    @relation(fields: [orderId], references: [id])
  subscriptionId String?
  subscription Subscription? @relation(fields: [subscriptionId], references: [id])
  
  // Xero specific fields
  xeroInvoiceId String?  @unique
  
  // GL Code mapping
  glCodeId    String
  glCode      GLCode    @relation(fields: [glCodeId], references: [id])
  
  @@map("invoices")
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  VOID
  OVERDUE
}

// GL Code model for accounting
model GLCode {
  id          String    @id @default(cuid())
  code        String    @unique
  name        String
  description String?
  active      Boolean   @default(true)
  
  // Xero specific fields
  xeroAccountId String?  @unique
  
  // Relations
  products    Product[]
  invoices    Invoice[]
  
  @@map("gl_codes")
}
